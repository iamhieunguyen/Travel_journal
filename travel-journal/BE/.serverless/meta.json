{
  "D:\\AWS_Project\\travel-journal\\serverless.yml": {
    "versionFramework": "4.21.0",
    "servicePath": "D:\\AWS_Project\\travel-journal\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "travel-journal",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "python3.11",
        "region": "us-east-1",
        "environment": {
          "USERS_TABLE": "Users",
          "JOURNAL_TABLE": "Journal"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        }
      },
      "functions": {
        "api": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": {
                "path": "/",
                "method": "ANY"
              }
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "ANY"
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JournalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Journal",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entryId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entryId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "us-east-1",
      "environment": {
        "USERS_TABLE": "Users",
        "JOURNAL_TABLE": "Journal"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Serverless command \"offline\" not found. Run \"serverless help\" for a list of all available commands.",
      "code": "UNRECOGNIZED_CLI_COMMAND"
    },
    "serviceRawFile": "service: travel-journal\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: python3.11\n  region: us-east-1\n  environment:\n    USERS_TABLE: Users\n    JOURNAL_TABLE: Journal\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Scan\n          Resource: \"*\"\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n\ncustom:\n  wsgi:\n    app: app.app  # Flask app náº±m trong file app.py\n    packRequirements: false\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    JournalTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOURNAL_TABLE}\n        AttributeDefinitions:\n          - AttributeName: entryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: entryId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "offline"
    ],
    "options": {},
    "orgId": "955eb786-306f-4b22-805b-a489afe8da2e",
    "orgName": "hieunx",
    "userId": "N8rTLlBCQ5jsFVtL55",
    "userName": "hieunx",
    "serviceProviderAwsAccountId": "972199684364",
    "serviceProviderAwsCfStackName": "travel-journal-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:972199684364:stack/travel-journal-dev/2b2f4af0-a8fc-11f0-adb7-121e7bdb6b45",
    "serviceProviderAwsCfStackCreated": "2025-10-14T12:49:05.938Z",
    "serviceProviderAwsCfStackUpdated": "2025-10-14T14:29:57.209Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:972199684364:function:travel-journal-dev-api:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-travel-journal-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://ylfi6o5oc9.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-travel-journal-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-82940df5-45f8",
        "ExportName": "sls-travel-journal-dev-ServerlessDeploymentBucketName"
      }
    ]
  },
  "D:\\AWS_Project\\travel-journal\\BE\\serverless.yml": {
    "versionFramework": "4.21.0",
    "servicePath": "D:\\AWS_Project\\travel-journal\\BE\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "travel-journal",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "python3.11",
        "region": "us-east-1",
        "environment": {
          "USERS_TABLE": "Users",
          "JOURNAL_TABLE": "Journal",
          "IS_OFFLINE": "true"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements",
        "serverless-offline"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        },
        "pythonRequirements": {
          "dockerizePip": "non-linux"
        }
      },
      "functions": {
        "api": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": "*"
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "ANY"
              }
            }
          ],
          "name": "travel-journal-dev-api"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JournalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Journal",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entryId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entryId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "us-east-1",
      "environment": {
        "USERS_TABLE": "Users",
        "JOURNAL_TABLE": "Journal",
        "IS_OFFLINE": "true"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Cannot read properties of undefined (reading 'startsWith')",
      "stack": "TypeError: Cannot read properties of undefined (reading 'startsWith')\n    at generateHapiPath (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/utils/generateHapiPath.js:2:23)\n    at HttpServer.createRoutes (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/HttpServer.js:997:18)\n    at #createEvent (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:41:22)\n    at file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:46:24\n    at Array.forEach (<anonymous>)\n    at Http.create (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:45:12)\n    at #createHttp (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:201:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Promise.all (index 0)\n    at async ServerlessOffline.start (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:107:5)\n    at async #startWithExplicitEnd (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:163:5)\n    at async PluginManager.runHooks (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:9865)\n    at async PluginManager.invoke (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:10634)\n    at async PluginManager.run (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:11364)\n    at async Serverless.run (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1311:10523)\n    at async runFramework (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1338:1777)"
    },
    "serviceRawFile": "service: travel-journal\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: python3.11\n  region: us-east-1\n  environment:\n    USERS_TABLE: Users\n    JOURNAL_TABLE: Journal\n    IS_OFFLINE: true\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Scan\n          Resource: \"*\"\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n  - serverless-offline\n\ncustom:\n  wsgi:\n    app: app.app  # Flask app náº±m trong file app.py\n    packRequirements: false\n  pythonRequirements:\n    dockerizePip: non-linux\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http: '*'\n          # path: /\n          # method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    JournalTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOURNAL_TABLE}\n        AttributeDefinitions:\n          - AttributeName: entryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: entryId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "offline"
    ],
    "options": {},
    "orgId": "955eb786-306f-4b22-805b-a489afe8da2e",
    "orgName": "hieunx",
    "userId": "N8rTLlBCQ5jsFVtL55",
    "userName": "hieunx",
    "serviceProviderAwsAccountId": "972199684364",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  },
  "D:\\AWS_Project\\Travel_journal\\travel-journal\\BE\\serverless.yml": {
    "versionFramework": "4.22.0",
    "servicePath": "D:\\AWS_Project\\Travel_journal\\travel-journal\\BE\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "travel-journal",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "python3.11",
        "region": "us-east-1",
        "httpApi": {
          "cors": true
        },
        "environment": {
          "USERS_TABLE": "Users",
          "JOURNAL_TABLE": "Journal",
          "IS_OFFLINE": true
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:Query",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-offline",
        "serverless-dynamodb-local"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        },
        "pythonRequirements": {
          "dockerizePip": "non-linux"
        },
        "dynamodb": {
          "stages": [
            "dev"
          ],
          "start": {
            "port": 8000,
            "inMemory": true,
            "migrate": true,
            "seed": false
          }
        }
      },
      "functions": {
        "api": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "httpApi": "*"
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "ANY"
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JournalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Journal",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "journalId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "created_at",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "geohash_prefix",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "journalId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-createdAt",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "created_at",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "geohashPrefixIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "geohash_prefix",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "created_at",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "us-east-1",
      "httpApi": {
        "cors": true
      },
      "environment": {
        "USERS_TABLE": "Users",
        "JOURNAL_TABLE": "Journal",
        "IS_OFFLINE": true
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Serverless plugin \"serverless-dynamodb-local\" not found. Make sure it's installed and listed in the \"plugins\" section of your serverless config file. Use the --debug flag to learn more.",
      "stack": "ServerlessError2: Serverless plugin \"serverless-dynamodb-local\" not found. Make sure it's installed and listed in the \"plugins\" section of your serverless config file. Use the --debug flag to learn more.\n    at PluginManager.resolveServicePlugins (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1323:4433)\n    at async PluginManager.loadAllPlugins (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1323:2626)\n    at async Serverless.init (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1330:9843)\n    at async runFramework (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1357:839)\n    at async TraditionalRunner.run (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1353:28331)\n    at async route (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1528:2878)\n    at async Object.run (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1529:3755)\n    at async run2 (file:///C:/Users/kjt/.serverless/releases/4.22.0/package/dist/sf-core.js:1529:4909)",
      "code": "PLUGIN_NOT_FOUND"
    },
    "serviceRawFile": "service: travel-journal\r\nframeworkVersion: '4'\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.11\r\n  region: us-east-1\r\n  httpApi:\r\n    cors: true\r\n  environment:\r\n    USERS_TABLE: Users\r\n    JOURNAL_TABLE: Journal\r\n    IS_OFFLINE: true\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: Allow\r\n          Action:\r\n            - dynamodb:PutItem\r\n            - dynamodb:GetItem\r\n            - dynamodb:Scan\r\n            - dynamodb:Query\r\n            - dynamodb:UpdateItem\r\n            - dynamodb:DeleteItem\r\n          Resource: \"*\"\r\n\r\nplugins:\r\n  - serverless-wsgi\r\n  # - serverless-python-requirements\r\n  - serverless-offline\r\n  - serverless-dynamodb-local\r\n\r\ncustom:\r\n  wsgi:\r\n    app: app.app\r\n    packRequirements: false\r\n  pythonRequirements:\r\n    dockerizePip: non-linux\r\n\r\n  dynamodb:\r\n    stages:\r\n      - dev\r\n    start:\r\n      port: 8000\r\n      inMemory: true\r\n      migrate: true\r\n      seed: false\r\n\r\nfunctions:\r\n  api:\r\n    handler: wsgi_handler.handler\r\n    events:\r\n      - httpApi: '*'\r\n      - http:\r\n          path: /{proxy+}\r\n          method: ANY\r\n\r\nresources:\r\n  Resources:\r\n    UsersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.USERS_TABLE}\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n    JournalTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.JOURNAL_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: journalId\r\n            AttributeType: S\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: created_at\r\n            AttributeType: S\r\n          - AttributeName: geohash_prefix\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: journalId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: userId-createdAt\r\n            KeySchema:\r\n              - AttributeName: userId\r\n                KeyType: HASH\r\n              - AttributeName: created_at\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL\r\n          - IndexName: geohashPrefixIndex\r\n            KeySchema:\r\n              - AttributeName: geohash_prefix\r\n                KeyType: HASH\r\n              - AttributeName: created_at\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL",
    "command": [
      "offline"
    ],
    "options": {},
    "orgId": "5169bf5b-6062-42e7-a72c-ca07876d3c26",
    "orgName": "lowtechit",
    "userId": "Gts9xZMwpYkhThVZNQ",
    "userName": "lowtechit",
    "serviceProviderAwsAccountId": "972199684364",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}