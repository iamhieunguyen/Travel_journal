{
  "D:\\AWS_Project\\travel-journal\\serverless.yml": {
    "versionFramework": "4.21.0",
    "servicePath": "D:\\AWS_Project\\travel-journal\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "travel-journal",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "python3.11",
        "region": "us-east-1",
        "environment": {
          "USERS_TABLE": "Users",
          "JOURNAL_TABLE": "Journal"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        }
      },
      "functions": {
        "api": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": {
                "path": "/",
                "method": "ANY"
              }
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "ANY"
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JournalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Journal",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entryId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entryId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "us-east-1",
      "environment": {
        "USERS_TABLE": "Users",
        "JOURNAL_TABLE": "Journal"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Serverless command \"offline\" not found. Run \"serverless help\" for a list of all available commands.",
      "code": "UNRECOGNIZED_CLI_COMMAND"
    },
    "serviceRawFile": "service: travel-journal\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: python3.11\n  region: us-east-1\n  environment:\n    USERS_TABLE: Users\n    JOURNAL_TABLE: Journal\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Scan\n          Resource: \"*\"\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n\ncustom:\n  wsgi:\n    app: app.app  # Flask app náº±m trong file app.py\n    packRequirements: false\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    JournalTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOURNAL_TABLE}\n        AttributeDefinitions:\n          - AttributeName: entryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: entryId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "offline"
    ],
    "options": {},
    "orgId": "955eb786-306f-4b22-805b-a489afe8da2e",
    "orgName": "hieunx",
    "userId": "N8rTLlBCQ5jsFVtL55",
    "userName": "hieunx",
    "serviceProviderAwsAccountId": "972199684364",
    "serviceProviderAwsCfStackName": "travel-journal-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:972199684364:stack/travel-journal-dev/2b2f4af0-a8fc-11f0-adb7-121e7bdb6b45",
    "serviceProviderAwsCfStackCreated": "2025-10-14T12:49:05.938Z",
    "serviceProviderAwsCfStackUpdated": "2025-10-14T14:29:57.209Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:972199684364:function:travel-journal-dev-api:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-travel-journal-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://ylfi6o5oc9.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-travel-journal-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-82940df5-45f8",
        "ExportName": "sls-travel-journal-dev-ServerlessDeploymentBucketName"
      }
    ]
  },
  "D:\\AWS_Project\\travel-journal\\BE\\serverless.yml": {
    "versionFramework": "4.21.0",
    "servicePath": "D:\\AWS_Project\\travel-journal\\BE\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "travel-journal",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "python3.11",
        "region": "us-east-1",
        "environment": {
          "USERS_TABLE": "Users",
          "JOURNAL_TABLE": "Journal",
          "IS_OFFLINE": "true"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements",
        "serverless-offline"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        },
        "pythonRequirements": {
          "dockerizePip": "non-linux"
        }
      },
      "functions": {
        "api": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": "*"
            },
            {
              "http": {
                "path": "/{proxy+}",
                "method": "ANY"
              }
            }
          ],
          "name": "travel-journal-dev-api"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JournalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Journal",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entryId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entryId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "region": "us-east-1",
      "environment": {
        "USERS_TABLE": "Users",
        "JOURNAL_TABLE": "Journal",
        "IS_OFFLINE": "true"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Cannot read properties of undefined (reading 'startsWith')",
      "stack": "TypeError: Cannot read properties of undefined (reading 'startsWith')\n    at generateHapiPath (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/utils/generateHapiPath.js:2:23)\n    at HttpServer.createRoutes (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/HttpServer.js:997:18)\n    at #createEvent (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:41:22)\n    at file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:46:24\n    at Array.forEach (<anonymous>)\n    at Http.create (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/events/http/Http.js:45:12)\n    at #createHttp (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:201:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Promise.all (index 0)\n    at async ServerlessOffline.start (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:107:5)\n    at async #startWithExplicitEnd (file:///D:/AWS_Project/travel-journal/BE/node_modules/serverless-offline/src/ServerlessOffline.js:163:5)\n    at async PluginManager.runHooks (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:9865)\n    at async PluginManager.invoke (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:10634)\n    at async PluginManager.run (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1304:11364)\n    at async Serverless.run (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1311:10523)\n    at async runFramework (file:///C:/Users/Admin/.serverless/releases/4.21.0/package/dist/sf-core.js:1338:1777)"
    },
    "serviceRawFile": "service: travel-journal\nframeworkVersion: '4'\n\nprovider:\n  name: aws\n  runtime: python3.11\n  region: us-east-1\n  environment:\n    USERS_TABLE: Users\n    JOURNAL_TABLE: Journal\n    IS_OFFLINE: true\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Scan\n          Resource: \"*\"\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n  - serverless-offline\n\ncustom:\n  wsgi:\n    app: app.app  # Flask app náº±m trong file app.py\n    packRequirements: false\n  pythonRequirements:\n    dockerizePip: non-linux\n\nfunctions:\n  api:\n    handler: wsgi_handler.handler\n    events:\n      - http: '*'\n          # path: /\n          # method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.USERS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    JournalTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOURNAL_TABLE}\n        AttributeDefinitions:\n          - AttributeName: entryId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: entryId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "offline"
    ],
    "options": {},
    "orgId": "955eb786-306f-4b22-805b-a489afe8da2e",
    "orgName": "hieunx",
    "userId": "N8rTLlBCQ5jsFVtL55",
    "userName": "hieunx",
    "serviceProviderAwsAccountId": "972199684364",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}